"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var rp = require("request-promise-native");
var constant_1 = require("./constant");
/**
 * Last update: 2016/06/26
 * https://translate.google.com/translate/releases/twsfe_w_20160620_RC00/r/js/desktop_module_main.js
 *
 * Everything between 'BEGIN' and 'END' was copied from the url above.
 * fork from https://github.com/vitalets/google-translate-token
 * for support brower
 */
/* eslint-disable */
// BEGIN
function calculateTK(text, tkk) {
    var tkkList = tkk.split('.');
    var tkkFirst = Number(tkkList[0]) || 0;
    var tkkSecond = Number(tkkList[1]) || 0;
    var bytes = Array.prototype.slice.call(Buffer.from(text), 0);
    var tkFirst = tkkFirst;
    for (var i = 0; i < bytes.length; i++) {
        tkFirst += bytes[i];
        tkFirst = encrypt(tkFirst, '+-a^+6');
    }
    tkFirst = encrypt(tkFirst, '+-3^+b+-f');
    tkFirst ^= tkkSecond;
    if (tkFirst < 0)
        tkFirst = (tkFirst & 2147483647) + 2147483648;
    tkFirst %= 1E6;
    return tkFirst.toString() + '.' + (tkFirst ^ tkkFirst);
}
exports.calculateTK = calculateTK;
function encrypt(num, key) {
    for (var i = 0; i < key.length - 2; i += 3) {
        var char = key.charAt(i + 2);
        var cc = char >= 'a'
            ? char.charCodeAt(0) - 87
            : Number(char);
        cc = key.charAt(i + 1) === '+'
            ? num >>> cc
            : num << cc;
        num = key.charAt(i) === '+'
            ? num + cc & 4294967295
            : num ^ cc;
    }
    return num;
}
// END
/* eslint-enable */
function getTKK(opts) {
    return __awaiter(this, void 0, void 0, function () {
        var reqOpts, res, matches, tkk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    opts = opts || {};
                    reqOpts = __assign({ method: 'get', url: 'https://translate.google.' + (opts.tld || 'com') }, opts.config);
                    if (opts.proxy) {
                        reqOpts.proxy = "http://" + opts.proxy.host + ":" + opts.proxy.port;
                    }
                    reqOpts.headers = Object.assign({
                        'User-Agent': constant_1.userAgent,
                    }, reqOpts.headers);
                    return [4 /*yield*/, rp(reqOpts)];
                case 1:
                    res = _a.sent();
                    matches = res.match(/tkk:\s?'(.+?)'/i);
                    if (!matches) {
                        throw new Error('Cannot get TKK.');
                    }
                    tkk = matches[1];
                    return [2 /*return*/, tkk];
            }
        });
    });
}
function getTK(text, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var tkk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getTKK(opts)];
                case 1:
                    tkk = _a.sent();
                    return [2 /*return*/, calculateTK(text, tkk)];
            }
        });
    });
}
exports.getTK = getTK;
